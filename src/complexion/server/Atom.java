package complexion.server;


import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;

import complexion.resource.Sprite;
import complexion.common.Utils;
/**
 * Server-side representation of a game Atom.
 * 
 * This includes game-logic stuff, such as atom-interaction(Bump, Enter, etc.),
 * verbs, user-defined functions and so on.
 */
public class Atom {
		// Unique ID of the object, generated by the server.
		public int UID; 
		
		// Position on the map
		public int x,y;
		
		// Sprite the object is currently associated with.
		public Sprite sprite;  
		
		// Determines whether the object will be rendered above or
		// below other objects
		public int layer;
		
		// Each sprite has multiple states, which are more or less
		// sprites of their own. sprite_state determines which state
		// is used.
		public String sprite_state;
		
		// TODO: Add a way for the server to restart an animation
		//       (similar to the BYOND flick proc)
		
		// A sprite can define different appearances depending on the
		// direction. This variable should be one of the constants defined
		// in complexion.Directions
		public int direction;
		
		
		// A verb call to the objects. 
		// Now with added reflections! Verbs are no longer a special class but normal functions inside the class
		@SuppressWarnings("rawtypes")
		public boolean callVerb(String key,Object[] args)
		{
			Class[] classes = Utils.toClass(args);
			Method func;
			try {
				func = this.getClass().getMethod(key,classes);
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			} catch (NoSuchMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			}
			if(func!= null)
			{
				try {
					func.invoke(this, args);
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return true;
			}
			else 
				return false;
		}
		public void printTest(String A,String B)
		{
			System.out.println(A+B);
		}

}

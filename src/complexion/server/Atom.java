package complexion.server;


import java.util.Map;

import complexion.resource.Sprite;

/**
 * Server-side representation of a game Atom.
 * 
 * This includes game-logic stuff, such as atom-interaction(Bump, Enter, etc.),
 * verbs, user-defined functions and so on.
 */
public class Atom {
		// Unique ID of the object, generated by the server.
		public int UID; 
		
		// Position on the map
		public int x,y;
		
		// Sprite the object is currently associated with.
		public Sprite sprite;  
		
		// Maps verb names to verb objects(this may become unnecessary with reflection)
		public Map<String,Verb> verbs;
		
		// Determines whether the object will be rendered above or
		// below other objects
		public int layer;
		
		// Each sprite has multiple states, which are more or less
		// sprites of their own. sprite_state determines which state
		// is used.
		public String sprite_state;
		
		// TODO: Add a way for the server to restart an animation
		//       (similar to the BYOND flick proc)
		
		// A sprite can define different appearances depending on the
		// direction. This variable should be one of the constants defined
		// in complexion.Directions
		public int direction;
		
		
		// A verb call to the object with Java Object args the verb itself has to sort these out.
		// TODO: Use java reflection to call the verb with the right parameters etc.
		boolean callVerb(String key,Object[] args)
		{
			if(verbs.containsKey(key))
			{
				verbs.get(key).run(args);
				return true;
			}
			return false;
		}

}
